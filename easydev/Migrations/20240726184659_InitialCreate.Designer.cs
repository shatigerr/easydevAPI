// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using easydev.Models;

#nullable disable

namespace easydev.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20240726184659_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "DB", new[] { "Mysql", "SQL Server", "PostgreSQL" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "HTTP METHOD", new[] { "GET", "POST", "DELETE", "PUT", "PATCH" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "aal_level", new[] { "aal1", "aal2", "aal3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "code_challenge_method", new[] { "s256", "plain" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_status", new[] { "unverified", "verified" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_type", new[] { "totp", "webauthn" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "one_time_token_type", new[] { "confirmation_token", "reauthentication_token", "recovery_token", "email_change_token_new", "email_change_token_current", "phone_change_token" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "pgsodium", "key_status", new[] { "default", "valid", "invalid", "expired" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "pgsodium", "key_type", new[] { "aead-ietf", "aead-det", "hmacsha512", "hmacsha256", "auth", "shorthash", "generichash", "kdf", "secretbox", "secretstream", "stream_xchacha20" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pg_stat_statements");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgjwt");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "uuid-ossp");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "graphql", "pg_graphql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgsodium", "pgsodium");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vault", "supabase_vault");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("seq_schema_version", "graphql")
                .IsCyclic();

            modelBuilder.Entity("easydev.Models.AuditLogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("InstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("instance_id");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("ip_address")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Payload")
                        .HasColumnType("json")
                        .HasColumnName("payload");

                    b.HasKey("Id")
                        .HasName("audit_log_entries_pkey");

                    b.HasIndex(new[] { "InstanceId" }, "audit_logs_instance_id_idx");

                    b.ToTable("audit_log_entries", "auth", t =>
                        {
                            t.HasComment("Auth: Audit trail for user actions.");
                        });
                });

            modelBuilder.Entity("easydev.Models.Bucket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<List<string>>("AllowedMimeTypes")
                        .HasColumnType("text[]")
                        .HasColumnName("allowed_mime_types");

                    b.Property<bool?>("AvifAutodetection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("avif_autodetection");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("FileSizeLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_limit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner")
                        .HasComment("Field is deprecated, use owner_id instead");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<bool?>("Public")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("public");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("buckets_pkey");

                    b.HasIndex(new[] { "Name" }, "bname")
                        .IsUnique();

                    b.ToTable("buckets", "storage");
                });

            modelBuilder.Entity("easydev.Models.Database", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Database1")
                        .HasColumnType("character varying")
                        .HasColumnName("database");

                    b.Property<string>("Dbengine")
                        .HasColumnType("text")
                        .HasColumnName("DBEngine");

                    b.Property<string>("Host")
                        .HasColumnType("character varying")
                        .HasColumnName("host");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("Port")
                        .HasColumnType("character varying")
                        .HasColumnName("port");

                    b.Property<string>("User")
                        .HasColumnType("character varying")
                        .HasColumnName("user");

                    b.HasKey("Id")
                        .HasName("Database_pkey");

                    b.ToTable("Database", (string)null);
                });

            modelBuilder.Entity("easydev.Models.DecryptedSecret", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DecryptedSecret1")
                        .HasColumnType("text")
                        .HasColumnName("decrypted_secret")
                        .UseCollation("C");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("KeyId")
                        .HasColumnType("uuid")
                        .HasColumnName("key_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("Nonce")
                        .HasColumnType("bytea")
                        .HasColumnName("nonce");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ToTable((string)null);

                    b.ToView("decrypted_secrets", "vault");
                });

            modelBuilder.Entity("easydev.Models.Endpoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("HttpMethod")
                        .HasColumnType("text")
                        .HasColumnName("httpMethod");

                    b.Property<long?>("IdProject")
                        .HasColumnType("bigint")
                        .HasColumnName("idProject");

                    b.Property<string>("Params")
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<string>("Query")
                        .HasColumnType("character varying")
                        .HasColumnName("query");

                    b.Property<string>("Url")
                        .HasColumnType("character varying")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("Endpoint_pkey");

                    b.HasIndex("IdProject");

                    b.ToTable("Endpoint", (string)null);
                });

            modelBuilder.Entity("easydev.Models.FlowState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auth_code");

                    b.Property<DateTime?>("AuthCodeIssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("auth_code_issued_at");

                    b.Property<string>("AuthenticationMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("authentication_method");

                    b.Property<string>("CodeChallenge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_challenge");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ProviderAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("provider_access_token");

                    b.Property<string>("ProviderRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("provider_refresh_token");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("flow_state_pkey");

                    b.HasIndex(new[] { "CreatedAt" }, "flow_state_created_at_idx")
                        .IsDescending();

                    b.HasIndex(new[] { "AuthCode" }, "idx_auth_code");

                    b.HasIndex(new[] { "UserId", "AuthenticationMethod" }, "idx_user_id_auth_method");

                    b.ToTable("flow_state", "auth", t =>
                        {
                            t.HasComment("stores metadata for pkce logins");
                        });
                });

            modelBuilder.Entity("easydev.Models.Identity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .HasComputedColumnSql("lower((identity_data ->> 'email'::text))", true)
                        .HasComment("Auth: Email is a generated column that references the optional email property in the identity_data");

                    b.Property<string>("IdentityData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("identity_data");

                    b.Property<DateTime?>("LastSignInAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sign_in_at");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("identities_pkey");

                    b.HasIndex(new[] { "Email" }, "identities_email_idx");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Email" }, "identities_email_idx"), new[] { "text_pattern_ops" });

                    b.HasIndex(new[] { "ProviderId", "Provider" }, "identities_provider_id_provider_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "identities_user_id_idx");

                    b.ToTable("identities", "auth", t =>
                        {
                            t.HasComment("Auth: Stores identities associated to a user.");
                        });
                });

            modelBuilder.Entity("easydev.Models.Instance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("RawBaseConfig")
                        .HasColumnType("text")
                        .HasColumnName("raw_base_config");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("instances_pkey");

                    b.ToTable("instances", "auth", t =>
                        {
                            t.HasComment("Auth: Manages users across multiple sites.");
                        });
                });

            modelBuilder.Entity("easydev.Models.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("idProject")
                        .HasColumnType("bigint");

                    b.Property<long?>("idUser")
                        .HasColumnType("bigint");

                    b.Property<string>("query")
                        .HasColumnType("text");

                    b.Property<long?>("requestDuration")
                        .HasColumnType("bigint");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("easydev.Models.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("topic");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("messages_pkey");

                    b.HasIndex(new[] { "Topic" }, "messages_topic_index");

                    b.ToTable("messages", "realtime");
                });

            modelBuilder.Entity("easydev.Models.MfaAmrClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthenticationMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("authentication_method");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("amr_id_pk");

                    b.HasIndex(new[] { "SessionId", "AuthenticationMethod" }, "mfa_amr_claims_session_id_authentication_method_pkey")
                        .IsUnique();

                    b.ToTable("mfa_amr_claims", "auth", t =>
                        {
                            t.HasComment("auth: stores authenticator method reference claims for multi factor authentication");
                        });
                });

            modelBuilder.Entity("easydev.Models.MfaChallenge", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FactorId")
                        .HasColumnType("uuid")
                        .HasColumnName("factor_id");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.HasKey("Id")
                        .HasName("mfa_challenges_pkey");

                    b.HasIndex("FactorId");

                    b.HasIndex(new[] { "CreatedAt" }, "mfa_challenge_created_at_idx")
                        .IsDescending();

                    b.ToTable("mfa_challenges", "auth", t =>
                        {
                            t.HasComment("auth: stores metadata about challenge requests made");
                        });
                });

            modelBuilder.Entity("easydev.Models.MfaFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("friendly_name");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("mfa_factors_pkey");

                    b.HasIndex(new[] { "UserId", "CreatedAt" }, "factor_id_created_at_idx");

                    b.HasIndex(new[] { "FriendlyName", "UserId" }, "mfa_factors_user_friendly_name_unique")
                        .IsUnique()
                        .HasFilter("(TRIM(BOTH FROM friendly_name) <> ''::text)");

                    b.HasIndex(new[] { "UserId" }, "mfa_factors_user_id_idx");

                    b.ToTable("mfa_factors", "auth", t =>
                        {
                            t.HasComment("auth: stores metadata about factors");
                        });
                });

            modelBuilder.Entity("easydev.Models.Migration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ExecutedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("executed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("hash");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("migrations_pkey");

                    b.HasIndex(new[] { "Name" }, "migrations_name_key")
                        .IsUnique();

                    b.ToTable("migrations", "storage");
                });

            modelBuilder.Entity("easydev.Models.Object", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BucketId")
                        .HasColumnType("text")
                        .HasColumnName("bucket_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastAccessedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner")
                        .HasComment("Field is deprecated, use owner_id instead");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<List<string>>("PathTokens")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text[]")
                        .HasColumnName("path_tokens")
                        .HasComputedColumnSql("string_to_array(name, '/'::text)", true);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("objects_pkey");

                    b.HasIndex(new[] { "BucketId", "Name" }, "bucketid_objname")
                        .IsUnique();

                    b.HasIndex(new[] { "BucketId", "Name" }, "idx_objects_bucket_id_name");

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex(new[] { "BucketId", "Name" }, "idx_objects_bucket_id_name"), new[] { null, "C" });

                    b.HasIndex(new[] { "Name" }, "name_prefix_search");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "name_prefix_search"), new[] { "text_pattern_ops" });

                    b.ToTable("objects", "storage");
                });

            modelBuilder.Entity("easydev.Models.OneTimeToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("RelatesTo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relates_to");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("one_time_tokens_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "RelatesTo" }, "one_time_tokens_relates_to_hash_idx");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "RelatesTo" }, "one_time_tokens_relates_to_hash_idx"), "hash");

                    b.HasIndex(new[] { "TokenHash" }, "one_time_tokens_token_hash_hash_idx");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "TokenHash" }, "one_time_tokens_token_hash_hash_idx"), "hash");

                    b.ToTable("one_time_tokens", "auth");
                });

            modelBuilder.Entity("easydev.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<long?>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("idUser");

                    b.Property<long?>("Iddatabase")
                        .HasColumnType("bigint")
                        .HasColumnName("IDDatabase");

                    b.Property<Guid?>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("key")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("project_pkey");

                    b.HasIndex("IdUser");

                    b.HasIndex("Iddatabase");

                    b.HasIndex(new[] { "Id" }, "project_id_key")
                        .IsUnique();

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("easydev.Models.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("InstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("instance_id");

                    b.Property<string>("Parent")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("parent");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("refresh_tokens_pkey");

                    b.HasIndex(new[] { "InstanceId" }, "refresh_tokens_instance_id_idx");

                    b.HasIndex(new[] { "InstanceId", "UserId" }, "refresh_tokens_instance_id_user_id_idx");

                    b.HasIndex(new[] { "Parent" }, "refresh_tokens_parent_idx");

                    b.HasIndex(new[] { "SessionId", "Revoked" }, "refresh_tokens_session_id_revoked_idx");

                    b.HasIndex(new[] { "Token" }, "refresh_tokens_token_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "UpdatedAt" }, "refresh_tokens_updated_at_idx")
                        .IsDescending();

                    b.ToTable("refresh_tokens", "auth", t =>
                        {
                            t.HasComment("Auth: Store of tokens used to refresh JWT tokens once they expire.");
                        });
                });

            modelBuilder.Entity("easydev.Models.S3MultipartUpload", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BucketId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bucket_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("InProgressSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("in_progress_size");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key")
                        .UseCollation("C");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<string>("UploadSignature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upload_signature");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("s3_multipart_uploads_pkey");

                    b.HasIndex(new[] { "BucketId", "Key", "CreatedAt" }, "idx_multipart_uploads_list");

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex(new[] { "BucketId", "Key", "CreatedAt" }, "idx_multipart_uploads_list"), new[] { null, "C", null });

                    b.ToTable("s3_multipart_uploads", "storage");
                });

            modelBuilder.Entity("easydev.Models.S3MultipartUploadsPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BucketId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bucket_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Etag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("etag");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key")
                        .UseCollation("C");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<int>("PartNumber")
                        .HasColumnType("integer")
                        .HasColumnName("part_number");

                    b.Property<long>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("size");

                    b.Property<string>("UploadId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upload_id");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("s3_multipart_uploads_parts_pkey");

                    b.HasIndex("BucketId");

                    b.HasIndex("UploadId");

                    b.ToTable("s3_multipart_uploads_parts", "storage");
                });

            modelBuilder.Entity("easydev.Models.SamlProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AttributeMapping")
                        .HasColumnType("jsonb")
                        .HasColumnName("attribute_mapping");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_id");

                    b.Property<string>("MetadataUrl")
                        .HasColumnType("text")
                        .HasColumnName("metadata_url");

                    b.Property<string>("MetadataXml")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata_xml");

                    b.Property<string>("NameIdFormat")
                        .HasColumnType("text")
                        .HasColumnName("name_id_format");

                    b.Property<Guid>("SsoProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sso_provider_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("saml_providers_pkey");

                    b.HasIndex(new[] { "EntityId" }, "saml_providers_entity_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "SsoProviderId" }, "saml_providers_sso_provider_id_idx");

                    b.ToTable("saml_providers", "auth", t =>
                        {
                            t.HasComment("Auth: Manages SAML Identity Provider connections.");
                        });
                });

            modelBuilder.Entity("easydev.Models.SamlRelayState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("FlowStateId")
                        .HasColumnType("uuid")
                        .HasColumnName("flow_state_id");

                    b.Property<string>("ForEmail")
                        .HasColumnType("text")
                        .HasColumnName("for_email");

                    b.Property<string>("RedirectTo")
                        .HasColumnType("text")
                        .HasColumnName("redirect_to");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("request_id");

                    b.Property<Guid>("SsoProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sso_provider_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("saml_relay_states_pkey");

                    b.HasIndex("FlowStateId");

                    b.HasIndex(new[] { "CreatedAt" }, "saml_relay_states_created_at_idx")
                        .IsDescending();

                    b.HasIndex(new[] { "ForEmail" }, "saml_relay_states_for_email_idx");

                    b.HasIndex(new[] { "SsoProviderId" }, "saml_relay_states_sso_provider_id_idx");

                    b.ToTable("saml_relay_states", "auth", t =>
                        {
                            t.HasComment("Auth: Contains SAML Relay State information for each Service Provider initiated login.");
                        });
                });

            modelBuilder.Entity("easydev.Models.SchemaMigration", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("version");

                    b.HasKey("Version")
                        .HasName("schema_migrations_pkey");

                    b.ToTable("schema_migrations", "auth", t =>
                        {
                            t.HasComment("Auth: Manages updates to the auth system.");
                        });
                });

            modelBuilder.Entity("easydev.Models.SchemaMigration1", b =>
                {
                    b.Property<long>("Version")
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("inserted_at");

                    b.HasKey("Version")
                        .HasName("schema_migrations_pkey");

                    b.ToTable("schema_migrations", "realtime");
                });

            modelBuilder.Entity("easydev.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("FactorId")
                        .HasColumnType("uuid")
                        .HasColumnName("factor_id");

                    b.Property<IPAddress>("Ip")
                        .HasColumnType("inet")
                        .HasColumnName("ip");

                    b.Property<DateTime?>("NotAfter")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("not_after")
                        .HasComment("Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.");

                    b.Property<DateTime?>("RefreshedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("refreshed_at");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("sessions_pkey");

                    b.HasIndex(new[] { "NotAfter" }, "sessions_not_after_idx")
                        .IsDescending();

                    b.HasIndex(new[] { "UserId" }, "sessions_user_id_idx");

                    b.HasIndex(new[] { "UserId", "CreatedAt" }, "user_id_created_at_idx");

                    b.ToTable("sessions", "auth", t =>
                        {
                            t.HasComment("Auth: Stores session data associated to a user.");
                        });
                });

            modelBuilder.Entity("easydev.Models.SsoDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<Guid>("SsoProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sso_provider_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("sso_domains_pkey");

                    b.HasIndex(new[] { "SsoProviderId" }, "sso_domains_sso_provider_id_idx");

                    b.ToTable("sso_domains", "auth", t =>
                        {
                            t.HasComment("Auth: Manages SSO email address domain mapping to an SSO Identity Provider.");
                        });
                });

            modelBuilder.Entity("easydev.Models.SsoProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ResourceId")
                        .HasColumnType("text")
                        .HasColumnName("resource_id")
                        .HasComment("Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("sso_providers_pkey");

                    b.ToTable("sso_providers", "auth", t =>
                        {
                            t.HasComment("Auth: Manages SSO identity provider information; see saml_providers for SAML.");
                        });
                });

            modelBuilder.Entity("easydev.Models.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Claims")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("claims");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.HasKey("Id")
                        .HasName("pk_subscription");

                    b.ToTable("subscription", "realtime");
                });

            modelBuilder.Entity("easydev.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("mail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.HasIndex(new[] { "Mail" }, "user_mail_key")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("easydev.Models.User1", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Aud")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("aud");

                    b.Property<DateTime?>("BannedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("banned_until");

                    b.Property<DateTime?>("ConfirmationSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmation_sent_at");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("confirmation_token");

                    b.Property<DateTime?>("ConfirmedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at")
                        .HasComputedColumnSql("LEAST(email_confirmed_at, phone_confirmed_at)", true);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmailChange")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_change");

                    b.Property<short?>("EmailChangeConfirmStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("email_change_confirm_status");

                    b.Property<DateTime?>("EmailChangeSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_change_sent_at");

                    b.Property<string>("EmailChangeTokenCurrent")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_change_token_current")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("EmailChangeTokenNew")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_change_token_new");

                    b.Property<DateTime?>("EmailConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_confirmed_at");

                    b.Property<string>("EncryptedPassword")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("encrypted_password");

                    b.Property<Guid?>("InstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("instance_id");

                    b.Property<DateTime?>("InvitedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invited_at");

                    b.Property<bool>("IsAnonymous")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_anonymous");

                    b.Property<bool>("IsSsoUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_sso_user")
                        .HasComment("Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.");

                    b.Property<bool?>("IsSuperAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_super_admin");

                    b.Property<DateTime?>("LastSignInAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sign_in_at");

                    b.Property<string>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("phone")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<string>("PhoneChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("phone_change")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("PhoneChangeSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("phone_change_sent_at");

                    b.Property<string>("PhoneChangeToken")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone_change_token")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("PhoneConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("phone_confirmed_at");

                    b.Property<string>("RawAppMetaData")
                        .HasColumnType("jsonb")
                        .HasColumnName("raw_app_meta_data");

                    b.Property<string>("RawUserMetaData")
                        .HasColumnType("jsonb")
                        .HasColumnName("raw_user_meta_data");

                    b.Property<DateTime?>("ReauthenticationSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reauthentication_sent_at");

                    b.Property<string>("ReauthenticationToken")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reauthentication_token")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("RecoverySentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recovery_sent_at");

                    b.Property<string>("RecoveryToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("recovery_token");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "ConfirmationToken" }, "confirmation_token_idx")
                        .IsUnique()
                        .HasFilter("((confirmation_token)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "EmailChangeTokenCurrent" }, "email_change_token_current_idx")
                        .IsUnique()
                        .HasFilter("((email_change_token_current)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "EmailChangeTokenNew" }, "email_change_token_new_idx")
                        .IsUnique()
                        .HasFilter("((email_change_token_new)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "ReauthenticationToken" }, "reauthentication_token_idx")
                        .IsUnique()
                        .HasFilter("((reauthentication_token)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "RecoveryToken" }, "recovery_token_idx")
                        .IsUnique()
                        .HasFilter("((recovery_token)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "Email" }, "users_email_partial_key")
                        .IsUnique()
                        .HasFilter("(is_sso_user = false)");

                    b.HasIndex(new[] { "InstanceId" }, "users_instance_id_idx");

                    b.HasIndex(new[] { "IsAnonymous" }, "users_is_anonymous_idx");

                    b.HasIndex(new[] { "Phone" }, "users_phone_key")
                        .IsUnique();

                    b.ToTable("users", "auth", t =>
                        {
                            t.HasComment("Auth: Stores user login data within a secure schema.");
                        });
                });

            modelBuilder.Entity("easydev.Models.Endpoint", b =>
                {
                    b.HasOne("easydev.Models.Project", "IdProjectNavigation")
                        .WithMany("Endpoints")
                        .HasForeignKey("IdProject")
                        .HasConstraintName("Endpoint_idProject_fkey");

                    b.Navigation("IdProjectNavigation");
                });

            modelBuilder.Entity("easydev.Models.Identity", b =>
                {
                    b.HasOne("easydev.Models.User1", "User")
                        .WithMany("Identities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("identities_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("easydev.Models.MfaAmrClaim", b =>
                {
                    b.HasOne("easydev.Models.Session", "Session")
                        .WithMany("MfaAmrClaims")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mfa_amr_claims_session_id_fkey");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("easydev.Models.MfaChallenge", b =>
                {
                    b.HasOne("easydev.Models.MfaFactor", "Factor")
                        .WithMany("MfaChallenges")
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mfa_challenges_auth_factor_id_fkey");

                    b.Navigation("Factor");
                });

            modelBuilder.Entity("easydev.Models.MfaFactor", b =>
                {
                    b.HasOne("easydev.Models.User1", "User")
                        .WithMany("MfaFactors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mfa_factors_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("easydev.Models.Object", b =>
                {
                    b.HasOne("easydev.Models.Bucket", "Bucket")
                        .WithMany("Objects")
                        .HasForeignKey("BucketId")
                        .HasConstraintName("objects_bucketId_fkey");

                    b.Navigation("Bucket");
                });

            modelBuilder.Entity("easydev.Models.OneTimeToken", b =>
                {
                    b.HasOne("easydev.Models.User1", "User")
                        .WithMany("OneTimeTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("one_time_tokens_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("easydev.Models.Project", b =>
                {
                    b.HasOne("easydev.Models.User", "IdUserNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("project_idUser_fkey");

                    b.HasOne("easydev.Models.Database", "IddatabaseNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("Iddatabase")
                        .HasConstraintName("project_IDDatabase_fkey");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IddatabaseNavigation");
                });

            modelBuilder.Entity("easydev.Models.RefreshToken", b =>
                {
                    b.HasOne("easydev.Models.Session", "Session")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("refresh_tokens_session_id_fkey");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("easydev.Models.S3MultipartUpload", b =>
                {
                    b.HasOne("easydev.Models.Bucket", "Bucket")
                        .WithMany("S3MultipartUploads")
                        .HasForeignKey("BucketId")
                        .IsRequired()
                        .HasConstraintName("s3_multipart_uploads_bucket_id_fkey");

                    b.Navigation("Bucket");
                });

            modelBuilder.Entity("easydev.Models.S3MultipartUploadsPart", b =>
                {
                    b.HasOne("easydev.Models.Bucket", "Bucket")
                        .WithMany("S3MultipartUploadsParts")
                        .HasForeignKey("BucketId")
                        .IsRequired()
                        .HasConstraintName("s3_multipart_uploads_parts_bucket_id_fkey");

                    b.HasOne("easydev.Models.S3MultipartUpload", "Upload")
                        .WithMany("S3MultipartUploadsParts")
                        .HasForeignKey("UploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("s3_multipart_uploads_parts_upload_id_fkey");

                    b.Navigation("Bucket");

                    b.Navigation("Upload");
                });

            modelBuilder.Entity("easydev.Models.SamlProvider", b =>
                {
                    b.HasOne("easydev.Models.SsoProvider", "SsoProvider")
                        .WithMany("SamlProviders")
                        .HasForeignKey("SsoProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("saml_providers_sso_provider_id_fkey");

                    b.Navigation("SsoProvider");
                });

            modelBuilder.Entity("easydev.Models.SamlRelayState", b =>
                {
                    b.HasOne("easydev.Models.FlowState", "FlowState")
                        .WithMany("SamlRelayStates")
                        .HasForeignKey("FlowStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("saml_relay_states_flow_state_id_fkey");

                    b.HasOne("easydev.Models.SsoProvider", "SsoProvider")
                        .WithMany("SamlRelayStates")
                        .HasForeignKey("SsoProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("saml_relay_states_sso_provider_id_fkey");

                    b.Navigation("FlowState");

                    b.Navigation("SsoProvider");
                });

            modelBuilder.Entity("easydev.Models.Session", b =>
                {
                    b.HasOne("easydev.Models.User1", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sessions_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("easydev.Models.SsoDomain", b =>
                {
                    b.HasOne("easydev.Models.SsoProvider", "SsoProvider")
                        .WithMany("SsoDomains")
                        .HasForeignKey("SsoProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sso_domains_sso_provider_id_fkey");

                    b.Navigation("SsoProvider");
                });

            modelBuilder.Entity("easydev.Models.Bucket", b =>
                {
                    b.Navigation("Objects");

                    b.Navigation("S3MultipartUploads");

                    b.Navigation("S3MultipartUploadsParts");
                });

            modelBuilder.Entity("easydev.Models.Database", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("easydev.Models.FlowState", b =>
                {
                    b.Navigation("SamlRelayStates");
                });

            modelBuilder.Entity("easydev.Models.MfaFactor", b =>
                {
                    b.Navigation("MfaChallenges");
                });

            modelBuilder.Entity("easydev.Models.Project", b =>
                {
                    b.Navigation("Endpoints");
                });

            modelBuilder.Entity("easydev.Models.S3MultipartUpload", b =>
                {
                    b.Navigation("S3MultipartUploadsParts");
                });

            modelBuilder.Entity("easydev.Models.Session", b =>
                {
                    b.Navigation("MfaAmrClaims");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("easydev.Models.SsoProvider", b =>
                {
                    b.Navigation("SamlProviders");

                    b.Navigation("SamlRelayStates");

                    b.Navigation("SsoDomains");
                });

            modelBuilder.Entity("easydev.Models.User", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("easydev.Models.User1", b =>
                {
                    b.Navigation("Identities");

                    b.Navigation("MfaFactors");

                    b.Navigation("OneTimeTokens");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
